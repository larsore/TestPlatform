{"ast":null,"code":"var _jsxFileName = \"/Users/larsore/Documents/Master/TestPlatform/WebAuthnBabyDilithium/client/src/components/login/register.jsx\";\nimport React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Register extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  static changeErrorLabel(text) {\n    document.getElementById('errorLabel').innerHTML = text;\n  }\n  async handleRegister() {\n    const RPUrl = \"http://10.22.64.19:5050\";\n    const pollingUrl = \"http://10.22.64.19:5000\";\n    document.getElementById('errorLabel').innerHTML = \"\";\n    const username = Register.username;\n    const authID = \"AE52A450-7A4A-461E-9EEA-3AB71F019DAD\"; //Register.authID;\n\n    if (username === \"\" || authID === \"\") {\n      console.log(\"Empty username and/or authID...\");\n      Register.changeErrorLabel(\"Please fill in both a username and an authenticator ID\");\n      return;\n    }\n    const RPrequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"authenticator_id\": authID\n      })\n    };\n    const RPresponse = await fetch(RPUrl + '/register', RPrequestOptions);\n    const RPdata = await RPresponse.json();\n    console.log(RPdata);\n    // TODO: Compare HTTP Origin with RP_ID\n    //console.log(response.headers.get(\"Origin\"));\n\n    if (typeof RPdata === 'string') {\n      Register.changeErrorLabel(RPdata);\n      return;\n    }\n    const rp_id = RPdata[\"rp\"][\"id\"];\n    const challenge = RPdata[\"challenge\"];\n    const timeout = RPdata[\"timeout\"];\n    var clientData = sha256.create();\n    clientData.update(rp_id);\n    clientData.update(challenge);\n    const pollingRequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"authenticator_id\": authID,\n        \"rp_id\": rp_id,\n        \"client_data\": clientData.hex(),\n        \"timeout\": timeout,\n        \"username\": username\n      })\n    };\n    const pollingResponse = await fetch(pollingData + '/client/register', pollingRequestOptions);\n    const pollingData = await pollingResponse.json();\n\n    //Check response and act different based on repsonse from polling server\n    console.log(pollingData);\n    if (typeof pollingData === 'string') {\n      const registerFailedOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      };\n      const registerFailedResponse = await fetch(RPUrl + '/authenticator/register/failed', registerFailedOptions);\n      const registerFailedData = await registerFailedResponse.json();\n      console.log(registerFailedData);\n      Register.changeErrorLabel(pollingData);\n      return;\n    }\n    const RPresponseOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"credential_id\": pollingData[\"credential_id\"],\n        \"public_key_t\": pollingData[\"public_key_t\"],\n        \"public_key_seed\": pollingData[\"public_key_seed\"],\n        \"client_data\": pollingData[\"client_data\"],\n        \"authenticator_id\": pollingData[\"authenticator_id\"],\n        \"w\": pollingData[\"w\"],\n        \"c\": pollingData[\"c\"],\n        \"z1\": pollingData[\"z1\"],\n        \"z2\": pollingData[\"z2\"]\n      })\n    };\n    const RPresponseResponse = await fetch(RPUrl + '/authenticator/register', RPresponseOptions);\n    const RPresponseData = await RPresponseResponse.json();\n    console.log(RPresponseData);\n    if (typeof RPresponseData !== 'string') {\n      const pollingResultOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"authenticator_id\": authID,\n          \"username\": username\n        })\n      };\n      const pollingResultResponse = await fetch(pollingUrl + '/client/register/failed', pollingResultOptions);\n      const pollingResultData = await pollingResultResponse.json();\n      console.log(pollingResultData);\n      Register.changeErrorLabel(RPresponseData[\"msg\"]);\n    } else {\n      Register.changeErrorLabel(RPresponseData);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"base-container\",\n      ref: this.props.containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: loginImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"username\",\n              onChange: e => Register.username = e.target.value,\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"auth-id\",\n              onChange: e => Register.authID = e.target.value,\n              placeholder: \"Auth-id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 149,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        id: \"errorLabel\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.handleRegister,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 13\n    }, this);\n  }\n}\nRegister.username = \"\";\nRegister.authID = \"\";","map":{"version":3,"names":["React","loginImg","sha256","jsxDEV","_jsxDEV","Register","Component","constructor","props","changeErrorLabel","text","document","getElementById","innerHTML","handleRegister","RPUrl","pollingUrl","username","authID","console","log","RPrequestOptions","method","headers","body","JSON","stringify","RPresponse","fetch","RPdata","json","rp_id","challenge","timeout","clientData","create","update","pollingRequestOptions","hex","pollingResponse","pollingData","registerFailedOptions","registerFailedResponse","registerFailedData","RPresponseOptions","RPresponseResponse","RPresponseData","pollingResultOptions","pollingResultResponse","pollingResultData","render","className","ref","containerRef","children","fileName","_jsxFileName","lineNumber","columnNumber","src","type","name","onChange","e","target","value","placeholder","id","onClick"],"sources":["/Users/larsore/Documents/Master/TestPlatform/WebAuthnBabyDilithium/client/src/components/login/register.jsx"],"sourcesContent":["import React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\n\nexport class Register extends React.Component {\n\n    static username = \"\"\n    static authID = \"\"\n    \n    constructor(props) {\n        super(props);\n    }\n\n    static changeErrorLabel(text) {\n        document.getElementById('errorLabel').innerHTML = text;\n    }\n\n    async handleRegister() {\n\n        const RPUrl = \"http://10.22.64.19:5050\";\n        const pollingUrl = \"http://10.22.64.19:5000\";\n\n        document.getElementById('errorLabel').innerHTML = \"\";\n\n        const username = Register.username;\n        const authID = \"AE52A450-7A4A-461E-9EEA-3AB71F019DAD\"//Register.authID;\n\n        if (username === \"\" || authID === \"\") {\n            console.log(\"Empty username and/or authID...\");\n            Register.changeErrorLabel(\"Please fill in both a username and an authenticator ID\");\n            return\n        }\n        \n        \n\n        const RPrequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"authenticator_id\": authID\n            })\n        };\n        const RPresponse = await fetch(RPUrl+'/register', RPrequestOptions);\n        const RPdata = await RPresponse.json();\n        console.log(RPdata)\n        // TODO: Compare HTTP Origin with RP_ID\n        //console.log(response.headers.get(\"Origin\"));\n\n        if (typeof RPdata === 'string') {\n            Register.changeErrorLabel(RPdata)\n            \n            return\n        }\n        \n        const rp_id = RPdata[\"rp\"][\"id\"];\n        const challenge = RPdata[\"challenge\"];\n        const timeout = RPdata[\"timeout\"];\n        \n        var clientData = sha256.create();\n        clientData.update(rp_id);\n        clientData.update(challenge);\n\n        const pollingRequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"authenticator_id\": authID,\n                \"rp_id\": rp_id,\n                \"client_data\": clientData.hex(),\n                \"timeout\": timeout,\n                \"username\": username\n            })\n        };\n        const pollingResponse = await fetch(pollingData+'/client/register', pollingRequestOptions);\n        const pollingData = await pollingResponse.json();\n        \n        //Check response and act different based on repsonse from polling server\n        console.log(pollingData);\n        \n        if (typeof pollingData === 'string') {\n            const registerFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            const registerFailedResponse = await fetch(RPUrl+'/authenticator/register/failed', registerFailedOptions);\n            const registerFailedData = await registerFailedResponse.json();\n            console.log(registerFailedData)\n            \n            Register.changeErrorLabel(pollingData);\n            return\n        }\n        \n        const RPresponseOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"credential_id\": pollingData[\"credential_id\"],\n                \"public_key_t\": pollingData[\"public_key_t\"],\n                \"public_key_seed\": pollingData[\"public_key_seed\"],\n                \"client_data\": pollingData[\"client_data\"],\n                \"authenticator_id\": pollingData[\"authenticator_id\"],\n                \"w\": pollingData[\"w\"],\n                \"c\": pollingData[\"c\"],\n                \"z1\": pollingData[\"z1\"],\n                \"z2\": pollingData[\"z2\"]\n            })\n        };\n        const RPresponseResponse = await fetch(RPUrl+'/authenticator/register', RPresponseOptions);\n        const RPresponseData = await RPresponseResponse.json();\n        console.log(RPresponseData)\n        \n        if (typeof RPresponseData !== 'string') {\n            const pollingResultOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"authenticator_id\": authID,\n                    \"username\": username\n                })\n            };\n            const pollingResultResponse = await fetch(pollingUrl+'/client/register/failed', pollingResultOptions);\n            const pollingResultData = await pollingResultResponse.json();\n            console.log(pollingResultData);\n            Register.changeErrorLabel(RPresponseData[\"msg\"]);\n        } else {\n            Register.changeErrorLabel(RPresponseData);\n        }\n        \n    }\n\n    render() {\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className='header'>Register</div>\n                <div className='content'>\n                    <div className=\"image\">\n                        <img src={loginImg} />\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='username' onChange={(e) => Register.username=e.target.value} placeholder='Username'/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='auth-id' onChange={(e) => Register.authID=e.target.value} placeholder='Auth-id'/>\n                        </div>\n                    </div>\n                </div>\n                <label id='errorLabel'></label>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\" onClick={this.handleRegister}>\n                        Register\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}