{"ast":null,"code":"var _jsxFileName = \"/Users/larsore/Documents/Master/TestPlatform/WebAuthnBabyDilithium/client/src/components/login/register.jsx\";\nimport React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport raw from './baseUrl.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Register extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  static changeLabel(id, text) {\n    document.getElementById(id).innerHTML = text;\n  }\n  async handleRegister() {\n    await fetch(raw).then(r => r.text()).then(text => {\n      Register.RPUrl = text + \":5050\";\n      Register.pollingUrl = text + \":5000\";\n    });\n    document.getElementById('RPregResponse').innerHTML = \"\";\n    document.getElementById('authenticatorResponse').innerHTML = \"\";\n    document.getElementById('RPfinalResponse').innerHTML = \"\";\n    const username = Register.username;\n    const authID = Register.authID;\n    if (username === \"\" || authID === \"\") {\n      console.log(\"Empty username and/or authID...\");\n      Register.changeLabel(\"RPregResponse\", \"Please fill in both a username and an authenticator ID\");\n      return;\n    }\n    var hashedAuthID = sha256.create();\n    hashedAuthID.update(authID);\n    const RPrequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"authenticator_id\": hashedAuthID.hex()\n      })\n    };\n    const RPresponse = await fetch(Register.RPUrl + '/register', RPrequestOptions);\n    const RPdata = await RPresponse.json();\n    if (typeof RPdata === 'string') {\n      Register.changeLabel(\"RPregResponse\", RPdata);\n      return;\n    }\n    Register.changeLabel(\"RPregResponse\", \"Register information recieved from RP server\");\n    const rp_id = RPdata[\"rp_id\"];\n    const challenge = RPdata[\"challenge\"];\n    const timeout = RPdata[\"timeout\"];\n    var clientData = sha256.create();\n    clientData.update(rp_id);\n    clientData.update(challenge);\n    clientData = clientData.hex();\n    const pollingRequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"authenticator_id\": hashedAuthID.hex(),\n        \"rp_id\": rp_id,\n        \"client_data\": clientData,\n        \"timeout\": timeout,\n        \"username\": username\n      })\n    };\n    const pollingResponse = await fetch(Register.pollingUrl + '/client/register', pollingRequestOptions);\n    const pollingData = await pollingResponse.json();\n    if (typeof pollingData === 'string') {\n      const registerFailedOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      };\n      await fetch(Register.RPUrl + '/authenticator/register/failed', registerFailedOptions);\n      Register.changeLabel(\"authenticatorResponse\", pollingData);\n      return;\n    }\n    Register.changeLabel(\"authenticatorResponse\", \"Response from authenticator recieved\");\n    const RPresponseOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"credential_id\": pollingData[\"credential_id\"],\n        \"public_key_t\": pollingData[\"public_key_t\"],\n        \"public_key_seed\": pollingData[\"public_key_seed\"],\n        \"client_data\": pollingData[\"client_data\"]\n      })\n    };\n    const RPresponseResponse = await fetch(Register.RPUrl + '/authenticator/register', RPresponseOptions);\n    const RPresponseData = await RPresponseResponse.json();\n    if (typeof RPresponseData !== 'string') {\n      const pollingResultOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"authenticator_id\": hashedAuthID.hex(),\n          \"username\": username\n        })\n      };\n      await fetch(Register.pollingUrl + '/client/register/failed', pollingResultOptions);\n      Register.changeLabel(\"RPfinalResponse\", RPresponseData[\"reason\"] + \": \" + RPresponseData[\"msg\"]);\n    } else {\n      Register.changeLabel(\"RPfinalResponse\", RPresponseData);\n    }\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"base-container\",\n      ref: this.props.containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Register\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: loginImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 139,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"username\",\n              onChange: e => Register.username = e.target.value,\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"auth-id\",\n              onChange: e => Register.authID = e.target.value,\n              placeholder: \"Auth-id\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"informationLabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"RPregResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 151,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"authenticatorResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"RPfinalResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.handleRegister,\n          children: \"Register\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this);\n  }\n}\nRegister.username = \"\";\nRegister.authID = \"\";\nRegister.RPUrl = \"\";\nRegister.pollingUrl = \"\";","map":{"version":3,"names":["React","loginImg","sha256","raw","jsxDEV","_jsxDEV","Register","Component","constructor","props","changeLabel","id","text","document","getElementById","innerHTML","handleRegister","fetch","then","r","RPUrl","pollingUrl","username","authID","console","log","hashedAuthID","create","update","RPrequestOptions","method","headers","body","JSON","stringify","hex","RPresponse","RPdata","json","rp_id","challenge","timeout","clientData","pollingRequestOptions","pollingResponse","pollingData","registerFailedOptions","RPresponseOptions","RPresponseResponse","RPresponseData","pollingResultOptions","render","className","ref","containerRef","children","fileName","_jsxFileName","lineNumber","columnNumber","src","type","name","onChange","e","target","value","placeholder","onClick"],"sources":["/Users/larsore/Documents/Master/TestPlatform/WebAuthnBabyDilithium/client/src/components/login/register.jsx"],"sourcesContent":["import React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport raw from './baseUrl.txt';\n\nexport class Register extends React.Component {\n\n    static username = \"\"\n    static authID = \"\"\n    static RPUrl = \"\";\n    static pollingUrl = \"\";\n    \n    constructor(props) {\n        super(props);\n    }\n\n    static changeLabel(id, text) {\n        document.getElementById(id).innerHTML = text;\n    }\n\n    async handleRegister() {\n\n        await fetch(raw)\n            .then(r => r.text())\n            .then(text => {\n                Register.RPUrl = text+\":5050\";\n                Register.pollingUrl = text+\":5000\";\n            });\n\n        document.getElementById('RPregResponse').innerHTML = \"\";\n        document.getElementById('authenticatorResponse').innerHTML = \"\";\n        document.getElementById('RPfinalResponse').innerHTML = \"\";\n\n        const username = Register.username;\n        const authID = Register.authID;\n\n        if (username === \"\" || authID === \"\") {\n            console.log(\"Empty username and/or authID...\");\n            Register.changeLabel(\"RPregResponse\", \"Please fill in both a username and an authenticator ID\");\n            return\n        }\n\n        var hashedAuthID = sha256.create();\n        hashedAuthID.update(authID);\n\n        const RPrequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"authenticator_id\": hashedAuthID.hex()\n            })\n        };\n        const RPresponse = await fetch(Register.RPUrl+'/register', RPrequestOptions);\n        const RPdata = await RPresponse.json();\n\n        if (typeof RPdata === 'string') {\n            Register.changeLabel(\"RPregResponse\", RPdata)\n            return\n        }\n        Register.changeLabel(\"RPregResponse\", \"Register information recieved from RP server\")\n        \n        const rp_id = RPdata[\"rp_id\"];\n        const challenge = RPdata[\"challenge\"];\n        const timeout = RPdata[\"timeout\"];\n        \n        var clientData = sha256.create();\n        clientData.update(rp_id);\n        clientData.update(challenge);\n        clientData = clientData.hex()\n\n        const pollingRequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"authenticator_id\": hashedAuthID.hex(),\n                \"rp_id\": rp_id,\n                \"client_data\": clientData,\n                \"timeout\": timeout,\n                \"username\": username\n            })\n        };\n        const pollingResponse = await fetch(Register.pollingUrl+'/client/register', pollingRequestOptions);\n        const pollingData = await pollingResponse.json();\n        \n        if (typeof pollingData === 'string') {\n            const registerFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            await fetch(Register.RPUrl+'/authenticator/register/failed', registerFailedOptions);\n            \n            Register.changeLabel(\"authenticatorResponse\", pollingData);\n            return\n        }\n        Register.changeLabel(\"authenticatorResponse\", \"Response from authenticator recieved\");\n        \n        const RPresponseOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"credential_id\": pollingData[\"credential_id\"],\n                \"public_key_t\": pollingData[\"public_key_t\"],\n                \"public_key_seed\": pollingData[\"public_key_seed\"],\n                \"client_data\": pollingData[\"client_data\"]\n            })\n        };\n        const RPresponseResponse = await fetch(Register.RPUrl+'/authenticator/register', RPresponseOptions);\n        const RPresponseData = await RPresponseResponse.json();\n        \n        if (typeof RPresponseData !== 'string') {\n            const pollingResultOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"authenticator_id\": hashedAuthID.hex(),\n                    \"username\": username\n                })\n            };\n            await fetch(Register.pollingUrl+'/client/register/failed', pollingResultOptions);\n            \n            Register.changeLabel(\"RPfinalResponse\", RPresponseData[\"reason\"]+\": \"+RPresponseData[\"msg\"]);\n        } else {\n            Register.changeLabel(\"RPfinalResponse\", RPresponseData);\n        }\n        \n    }\n\n    render() {\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className='header'>Register</div>\n                <div className='content'>\n                    <div className=\"image\">\n                        <img src={loginImg} />\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='username' onChange={(e) => Register.username=e.target.value} placeholder='Username'/>\n                        </div>\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='auth-id' onChange={(e) => Register.authID=e.target.value} placeholder='Auth-id'/>\n                        </div>\n                    </div>\n                </div>\n                <div className='informationLabels'>\n                    <label id='RPregResponse'></label>\n                    <label id='authenticatorResponse'></label>\n                    <label id='RPfinalResponse'></label>\n                </div>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\" onClick={this.handleRegister}>\n                        Register\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,SAASC,MAAM,QAAQ,WAAW;AAClC,OAAOC,GAAG,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,OAAO,MAAMC,QAAQ,SAASN,KAAK,CAACO,SAAS,CAAC;EAO1CC,WAAWA,CAACC,KAAK,EAAE;IACf,KAAK,CAACA,KAAK,CAAC;EAChB;EAEA,OAAOC,WAAWA,CAACC,EAAE,EAAEC,IAAI,EAAE;IACzBC,QAAQ,CAACC,cAAc,CAACH,EAAE,CAAC,CAACI,SAAS,GAAGH,IAAI;EAChD;EAEA,MAAMI,cAAcA,CAAA,EAAG;IAEnB,MAAMC,KAAK,CAACd,GAAG,CAAC,CACXe,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACP,IAAI,EAAE,CAAC,CACnBM,IAAI,CAACN,IAAI,IAAI;MACVN,QAAQ,CAACc,KAAK,GAAGR,IAAI,GAAC,OAAO;MAC7BN,QAAQ,CAACe,UAAU,GAAGT,IAAI,GAAC,OAAO;IACtC,CAAC,CAAC;IAENC,QAAQ,CAACC,cAAc,CAAC,eAAe,CAAC,CAACC,SAAS,GAAG,EAAE;IACvDF,QAAQ,CAACC,cAAc,CAAC,uBAAuB,CAAC,CAACC,SAAS,GAAG,EAAE;IAC/DF,QAAQ,CAACC,cAAc,CAAC,iBAAiB,CAAC,CAACC,SAAS,GAAG,EAAE;IAEzD,MAAMO,QAAQ,GAAGhB,QAAQ,CAACgB,QAAQ;IAClC,MAAMC,MAAM,GAAGjB,QAAQ,CAACiB,MAAM;IAE9B,IAAID,QAAQ,KAAK,EAAE,IAAIC,MAAM,KAAK,EAAE,EAAE;MAClCC,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC;MAC9CnB,QAAQ,CAACI,WAAW,CAAC,eAAe,EAAE,wDAAwD,CAAC;MAC/F;IACJ;IAEA,IAAIgB,YAAY,GAAGxB,MAAM,CAACyB,MAAM,EAAE;IAClCD,YAAY,CAACE,MAAM,CAACL,MAAM,CAAC;IAE3B,MAAMM,gBAAgB,GAAG;MACrBC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,UAAU,EAAEZ,QAAQ;QACpB,kBAAkB,EAAEI,YAAY,CAACS,GAAG;MACxC,CAAC;IACL,CAAC;IACD,MAAMC,UAAU,GAAG,MAAMnB,KAAK,CAACX,QAAQ,CAACc,KAAK,GAAC,WAAW,EAAES,gBAAgB,CAAC;IAC5E,MAAMQ,MAAM,GAAG,MAAMD,UAAU,CAACE,IAAI,EAAE;IAEtC,IAAI,OAAOD,MAAM,KAAK,QAAQ,EAAE;MAC5B/B,QAAQ,CAACI,WAAW,CAAC,eAAe,EAAE2B,MAAM,CAAC;MAC7C;IACJ;IACA/B,QAAQ,CAACI,WAAW,CAAC,eAAe,EAAE,8CAA8C,CAAC;IAErF,MAAM6B,KAAK,GAAGF,MAAM,CAAC,OAAO,CAAC;IAC7B,MAAMG,SAAS,GAAGH,MAAM,CAAC,WAAW,CAAC;IACrC,MAAMI,OAAO,GAAGJ,MAAM,CAAC,SAAS,CAAC;IAEjC,IAAIK,UAAU,GAAGxC,MAAM,CAACyB,MAAM,EAAE;IAChCe,UAAU,CAACd,MAAM,CAACW,KAAK,CAAC;IACxBG,UAAU,CAACd,MAAM,CAACY,SAAS,CAAC;IAC5BE,UAAU,GAAGA,UAAU,CAACP,GAAG,EAAE;IAE7B,MAAMQ,qBAAqB,GAAG;MAC1Bb,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,kBAAkB,EAAER,YAAY,CAACS,GAAG,EAAE;QACtC,OAAO,EAAEI,KAAK;QACd,aAAa,EAAEG,UAAU;QACzB,SAAS,EAAED,OAAO;QAClB,UAAU,EAAEnB;MAChB,CAAC;IACL,CAAC;IACD,MAAMsB,eAAe,GAAG,MAAM3B,KAAK,CAACX,QAAQ,CAACe,UAAU,GAAC,kBAAkB,EAAEsB,qBAAqB,CAAC;IAClG,MAAME,WAAW,GAAG,MAAMD,eAAe,CAACN,IAAI,EAAE;IAEhD,IAAI,OAAOO,WAAW,KAAK,QAAQ,EAAE;MACjC,MAAMC,qBAAqB,GAAG;QAC1BhB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB,UAAU,EAAEZ;QAChB,CAAC;MACL,CAAC;MACD,MAAML,KAAK,CAACX,QAAQ,CAACc,KAAK,GAAC,gCAAgC,EAAE0B,qBAAqB,CAAC;MAEnFxC,QAAQ,CAACI,WAAW,CAAC,uBAAuB,EAAEmC,WAAW,CAAC;MAC1D;IACJ;IACAvC,QAAQ,CAACI,WAAW,CAAC,uBAAuB,EAAE,sCAAsC,CAAC;IAErF,MAAMqC,iBAAiB,GAAG;MACtBjB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QACjB,UAAU,EAAEZ,QAAQ;QACpB,eAAe,EAAEuB,WAAW,CAAC,eAAe,CAAC;QAC7C,cAAc,EAAEA,WAAW,CAAC,cAAc,CAAC;QAC3C,iBAAiB,EAAEA,WAAW,CAAC,iBAAiB,CAAC;QACjD,aAAa,EAAEA,WAAW,CAAC,aAAa;MAC5C,CAAC;IACL,CAAC;IACD,MAAMG,kBAAkB,GAAG,MAAM/B,KAAK,CAACX,QAAQ,CAACc,KAAK,GAAC,yBAAyB,EAAE2B,iBAAiB,CAAC;IACnG,MAAME,cAAc,GAAG,MAAMD,kBAAkB,CAACV,IAAI,EAAE;IAEtD,IAAI,OAAOW,cAAc,KAAK,QAAQ,EAAE;MACpC,MAAMC,oBAAoB,GAAG;QACzBpB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UAAE,cAAc,EAAE;QAAmB,CAAC;QAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACjB,kBAAkB,EAAER,YAAY,CAACS,GAAG,EAAE;UACtC,UAAU,EAAEb;QAChB,CAAC;MACL,CAAC;MACD,MAAML,KAAK,CAACX,QAAQ,CAACe,UAAU,GAAC,yBAAyB,EAAE6B,oBAAoB,CAAC;MAEhF5C,QAAQ,CAACI,WAAW,CAAC,iBAAiB,EAAEuC,cAAc,CAAC,QAAQ,CAAC,GAAC,IAAI,GAACA,cAAc,CAAC,KAAK,CAAC,CAAC;IAChG,CAAC,MAAM;MACH3C,QAAQ,CAACI,WAAW,CAAC,iBAAiB,EAAEuC,cAAc,CAAC;IAC3D;EAEJ;EAEAE,MAAMA,CAAA,EAAG;IACL,oBACI9C,OAAA;MAAK+C,SAAS,EAAC,gBAAgB;MAACC,GAAG,EAAE,IAAI,CAAC5C,KAAK,CAAC6C,YAAa;MAAAC,QAAA,gBACzDlD,OAAA;QAAK+C,SAAS,EAAC,QAAQ;QAAAG,QAAA,EAAC;MAAQ;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eACtCtD,OAAA;QAAK+C,SAAS,EAAC,SAAS;QAAAG,QAAA,gBACpBlD,OAAA;UAAK+C,SAAS,EAAC,OAAO;UAAAG,QAAA,eAClBlD,OAAA;YAAKuD,GAAG,EAAE3D;UAAS;YAAAuD,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA;QAAG;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACpB,eACNtD,OAAA;UAAK+C,SAAS,EAAC,MAAM;UAAAG,QAAA,gBACjBlD,OAAA;YAAK+C,SAAS,EAAC,YAAY;YAAAG,QAAA,eACvBlD,OAAA;cAAOwD,IAAI,EAAC,MAAM;cAACC,IAAI,EAAC,UAAU;cAACC,QAAQ,EAAGC,CAAC,IAAK1D,QAAQ,CAACgB,QAAQ,GAAC0C,CAAC,CAACC,MAAM,CAACC,KAAM;cAACC,WAAW,EAAC;YAAU;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QAC5G,eACNtD,OAAA;YAAK+C,SAAS,EAAC,YAAY;YAAAG,QAAA,eACvBlD,OAAA;cAAOwD,IAAI,EAAC,MAAM;cAACC,IAAI,EAAC,SAAS;cAACC,QAAQ,EAAGC,CAAC,IAAK1D,QAAQ,CAACiB,MAAM,GAACyC,CAAC,CAACC,MAAM,CAACC,KAAM;cAACC,WAAW,EAAC;YAAS;cAAAX,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA;UAAE;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,QACxG;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QACJ;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACJ,eACNtD,OAAA;QAAK+C,SAAS,EAAC,mBAAmB;QAAAG,QAAA,gBAC9BlD,OAAA;UAAOM,EAAE,EAAC;QAAe;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAClCtD,OAAA;UAAOM,EAAE,EAAC;QAAuB;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS,eAC1CtD,OAAA;UAAOM,EAAE,EAAC;QAAiB;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,QAAS;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAClC,eACNtD,OAAA;QAAK+C,SAAS,EAAC,QAAQ;QAAAG,QAAA,eACnBlD,OAAA;UAAQwD,IAAI,EAAC,QAAQ;UAACT,SAAS,EAAC,KAAK;UAACgB,OAAO,EAAE,IAAI,CAACpD,cAAe;UAAAuC,QAAA,EAAC;QAEpE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAS;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QACP;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QACJ;EAEd;AACJ;AA7JarD,QAAQ,CAEVgB,QAAQ,GAAG,EAAE;AAFXhB,QAAQ,CAGViB,MAAM,GAAG,EAAE;AAHTjB,QAAQ,CAIVc,KAAK,GAAG,EAAE;AAJRd,QAAQ,CAKVe,UAAU,GAAG,EAAE"},"metadata":{},"sourceType":"module","externalDependencies":[]}