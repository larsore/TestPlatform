[{"/Users/larsore/Documents/Master/TestPlatform/client/src/index.js":"1","/Users/larsore/Documents/Master/TestPlatform/client/src/reportWebVitals.js":"2","/Users/larsore/Documents/Master/TestPlatform/client/src/App.jsx":"3","/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/index.jsx":"4","/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/login.jsx":"5","/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/register.jsx":"6"},{"size":513,"mtime":1679835298399,"results":"7","hashOfConfig":"8"},{"size":362,"mtime":1679834485959,"results":"9","hashOfConfig":"8"},{"size":1866,"mtime":1679842348514,"results":"10","hashOfConfig":"8"},{"size":96,"mtime":1681904096647,"results":"11","hashOfConfig":"8"},{"size":6454,"mtime":1686398248698,"results":"12","hashOfConfig":"8"},{"size":6186,"mtime":1686391794896,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"s2076a",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/larsore/Documents/Master/TestPlatform/client/src/index.js",[],[],"/Users/larsore/Documents/Master/TestPlatform/client/src/reportWebVitals.js",[],[],"/Users/larsore/Documents/Master/TestPlatform/client/src/App.jsx",["33","34"],[],"/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/index.jsx",[],[],"/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/login.jsx",["35","36"],[],"import React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport raw from './baseUrl.txt';\n\nexport class Login extends React.Component {\n    \n    static username = \"\";\n    static RPUrl = \"\";\n    static pollingUrl = \"\";\n    \n    constructor(props) {\n        super(props);\n    }\n\n    static changeLabel(id, text) {\n        document.getElementById(id).innerHTML = text;\n    }\n\n    async handleLogin() {\n\n        await fetch(raw)\n            .then(r => r.text())\n            .then(text => {\n                Login.RPUrl = text+\":5050\";\n                Login.pollingUrl = text+\":5000\";\n            });\n\n        document.getElementById('RPloginResponse').innerHTML = \"\";\n        document.getElementById('authenticatorResponse').innerHTML = \"\";\n        document.getElementById('RPfinalResponse').innerHTML = \"\";\n\n        const username = Login.username;\n\n        if (username === \"\") {\n            console.log(\"Empty username\");\n            Login.changeLabel(\"RPloginResponse\", \"Please fill in a username\");\n            return\n        }\n        \n        const RPrequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username\n            })\n        };\n        const RPresponse = await fetch(Login.RPUrl+'/authenticate', RPrequestOptions);\n        const RPdata = await RPresponse.json();\n\n        if (typeof RPdata === 'string') {\n            Login.changeLabel(\"RPloginResponse\", RPdata)\n            return\n        }\n\n        const randomNumber = String(RPdata[\"random_int\"]);\n\n        Login.changeLabel(\"RPloginResponse\", \"Verification code: \"+randomNumber)\n        \n        const rp_id = RPdata[\"rp_id\"];\n        const challenge = RPdata[\"challenge\"];\n        const credID = RPdata[\"credential_id\"];\n        const timeout = RPdata[\"timeout\"];\n        const authID = RPdata[\"authenticator_id\"];\n        \n        var clientData = sha256.create();\n        clientData.update(rp_id);\n        clientData.update(challenge);\n\n        const pollingRequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"authenticator_id\": authID,\n                \"rp_id\": rp_id,\n                \"client_data\": clientData.hex(),\n                \"timeout\": timeout,\n                \"username\": username,\n                \"credential_id\": credID,\n                \"random_int\": randomNumber\n            })\n        };\n        const pollingResponse = await fetch(Login.pollingUrl+'/client/authenticate', pollingRequestOptions);\n        const pollingData = await pollingResponse.json();\n     \n        if (typeof pollingData === 'string') {\n            const loginFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            await fetch(Login.RPUrl+'/authenticator/authenticate/failed', loginFailedOptions);\n            \n            Login.changeLabel(\"authenticatorResponse\", pollingData);\n            return\n        }\n        Login.changeLabel(\"authenticatorResponse\", \"Recieved signature from authenticator\")\n        \n        if (pollingData[\"random_int\"] !== randomNumber) {\n            const loginFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            await fetch(Login.RPUrl+'/authenticator/authenticate/failed', loginFailedOptions);\n            \n            Login.changeLabel(\"authenticatorResponse\", \"Not the same verification number\");\n            return\n        }\n\n        const RPresponseOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"authenticator_data\": pollingData[\"authenticator_data\"],\n                \"omega\": pollingData[\"omega\"],\n                \"c\": pollingData[\"c\"],\n                \"z1\": pollingData[\"z1\"],\n                \"z2\": pollingData[\"z2\"],\n                \"client_data\": pollingData[\"client_data\"]\n            })\n        };\n        const RPresponseResponse = await fetch(Login.RPUrl+'/authenticator/authenticate', RPresponseOptions);\n        const RPresponseData = await RPresponseResponse.json();\n        \n        if (typeof RPresponseData !== 'string') {\n            const pollingResultOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"authenticator_id\": authID,\n                    \"username\": username\n                })\n            };\n            await fetch(Login.pollingUrl+'/client/authenticate/failed', pollingResultOptions);\n\n            Login.changeLabel(\"RPfinalResponse\", RPresponseData[\"reason\"]+\": \"+RPresponseData[\"msg\"]);\n        } else {\n            Login.changeLabel(\"RPfinalResponse\", RPresponseData);\n            //window.location.replace('https://www.youtube.com/watch?v=xvFZjo5PgG0?autoplay=1');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className='header'>Login</div>\n                <div className='content'>\n                    <div className=\"image\">\n                        <img src={loginImg} />\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='username' onChange={(e) => Login.username=e.target.value} placeholder='Username'/>\n                        </div>\n                    </div>\n                </div>\n                <div className='informationLabels'>\n                    <label id='RPloginResponse'></label>\n                    <label id='authenticatorResponse'></label>\n                    <label id='RPfinalResponse'></label>\n                </div>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\" onClick={this.handleLogin}>\n                        Login\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}","/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/register.jsx",["37","38"],[],{"ruleId":"39","severity":1,"message":"40","line":1,"column":16,"nodeType":"41","messageId":"42","endLine":1,"endColumn":24},{"ruleId":"39","severity":1,"message":"43","line":1,"column":26,"nodeType":"41","messageId":"42","endLine":1,"endColumn":35},{"ruleId":"44","severity":1,"message":"45","line":12,"column":5,"nodeType":"46","messageId":"47","endLine":14,"endColumn":6},{"ruleId":"48","severity":1,"message":"49","line":155,"column":25,"nodeType":"50","endLine":155,"endColumn":47},{"ruleId":"44","severity":1,"message":"45","line":13,"column":5,"nodeType":"46","messageId":"47","endLine":15,"endColumn":6},{"ruleId":"48","severity":1,"message":"49","line":140,"column":25,"nodeType":"50","endLine":140,"endColumn":47},"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'useEffect' is defined but never used.","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement"]