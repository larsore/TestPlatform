{"ast":null,"code":"var _jsxFileName = \"/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/login.jsx\";\nimport React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport raw from './baseUrl.txt';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport class Login extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n  static changeLabel(id, text) {\n    document.getElementById(id).innerHTML = text;\n  }\n  async handleLogin() {\n    await fetch(raw).then(r => r.text()).then(text => {\n      Login.RPUrl = text + \":5050\";\n      Login.pollingUrl = text + \":5000\";\n    });\n    document.getElementById('RPloginResponse').innerHTML = \"\";\n    document.getElementById('authenticatorResponse').innerHTML = \"\";\n    document.getElementById('RPfinalResponse').innerHTML = \"\";\n    const username = Login.username;\n    if (username === \"\") {\n      console.log(\"Empty username\");\n      Login.changeLabel(\"RPloginResponse\", \"Please fill in a username\");\n      return;\n    }\n    const RPrequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username\n      })\n    };\n    const RPresponse = await fetch(Login.RPUrl + '/authenticate', RPrequestOptions);\n    const RPdata = await RPresponse.json();\n    if (typeof RPdata === 'string') {\n      Login.changeLabel(\"RPloginResponse\", RPdata);\n      return;\n    }\n    const randomNumber = String(RPdata[\"random_int\"]);\n    Login.changeLabel(\"RPloginResponse\", \"Verification code: \" + randomNumber);\n    const rp_id = RPdata[\"rp_id\"];\n    const challenge = RPdata[\"challenge\"];\n    const credID = RPdata[\"credential_id\"];\n    const timeout = RPdata[\"timeout\"];\n    const authID = RPdata[\"authenticator_id\"];\n    var clientData = sha256.create();\n    clientData.update(rp_id);\n    clientData.update(challenge);\n    const pollingRequestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"authenticator_id\": authID,\n        \"rp_id\": rp_id,\n        \"client_data\": clientData.hex(),\n        \"timeout\": timeout,\n        \"username\": username,\n        \"credential_id\": credID,\n        \"random_int\": randomNumber\n      })\n    };\n    const pollingResponse = await fetch(Login.pollingUrl + '/client/authenticate', pollingRequestOptions);\n    const pollingData = await pollingResponse.json();\n    if (typeof pollingData === 'string') {\n      const loginFailedOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      };\n      await fetch(Login.RPUrl + '/authenticator/authenticate/failed', loginFailedOptions);\n      Login.changeLabel(\"authenticatorResponse\", pollingData);\n      return;\n    }\n    Login.changeLabel(\"authenticatorResponse\", \"Recieved signature from authenticator\");\n    if (pollingData[\"random_int\"] !== randomNumber) {\n      const loginFailedOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"username\": username\n        })\n      };\n      await fetch(Login.RPUrl + '/authenticator/authenticate/failed', loginFailedOptions);\n      Login.changeLabel(\"authenticatorResponse\", \"Not the same verification number\");\n      return;\n    }\n    const RPresponseOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        \"username\": username,\n        \"authenticator_data\": pollingData[\"authenticator_data\"],\n        \"omega\": pollingData[\"omega\"],\n        \"c\": pollingData[\"c\"],\n        \"z1\": pollingData[\"z1\"],\n        \"z2\": pollingData[\"z2\"],\n        \"client_data\": pollingData[\"client_data\"]\n      })\n    };\n    const RPresponseResponse = await fetch(Login.RPUrl + '/authenticator/authenticate', RPresponseOptions);\n    const RPresponseData = await RPresponseResponse.json();\n    if (typeof RPresponseData !== 'string') {\n      const pollingResultOptions = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          \"authenticator_id\": authID,\n          \"username\": username\n        })\n      };\n      await fetch(Login.pollingUrl + '/client/authenticate/failed', pollingResultOptions);\n      Login.changeLabel(\"RPfinalResponse\", RPresponseData[\"reason\"] + \": \" + RPresponseData[\"msg\"]);\n    } else {\n      Login.changeLabel(\"RPfinalResponse\", RPresponseData);\n      //window.location.replace('https://www.youtube.com/watch?v=xvFZjo5PgG0?autoplay=1');\n    }\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"base-container\",\n      ref: this.props.containerRef,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"header\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"content\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"image\",\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: loginImg\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 155,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"form-group\",\n            children: /*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"text\",\n              name: \"username\",\n              onChange: e => Login.username = e.target.value,\n              placeholder: \"Username\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 159,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"informationLabels\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"RPloginResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"authenticatorResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          id: \"RPfinalResponse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"footer\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"btn\",\n          onClick: this.handleLogin,\n          children: \"Login\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 13\n    }, this);\n  }\n}\nLogin.username = \"\";\nLogin.RPUrl = \"\";\nLogin.pollingUrl = \"\";","map":{"version":3,"names":["React","loginImg","sha256","raw","jsxDEV","_jsxDEV","Login","Component","constructor","props","changeLabel","id","text","document","getElementById","innerHTML","handleLogin","fetch","then","r","RPUrl","pollingUrl","username","console","log","RPrequestOptions","method","headers","body","JSON","stringify","RPresponse","RPdata","json","randomNumber","String","rp_id","challenge","credID","timeout","authID","clientData","create","update","pollingRequestOptions","hex","pollingResponse","pollingData","loginFailedOptions","RPresponseOptions","RPresponseResponse","RPresponseData","pollingResultOptions","render","className","ref","containerRef","children","fileName","_jsxFileName","lineNumber","columnNumber","src","type","name","onChange","e","target","value","placeholder","onClick"],"sources":["/Users/larsore/Documents/Master/TestPlatform/client/src/components/login/login.jsx"],"sourcesContent":["import React from 'react';\nimport loginImg from \"../../login.svg\";\nimport { sha256 } from 'js-sha256';\nimport raw from './baseUrl.txt';\n\nexport class Login extends React.Component {\n    \n    static username = \"\";\n    static RPUrl = \"\";\n    static pollingUrl = \"\";\n    \n    constructor(props) {\n        super(props);\n    }\n\n    static changeLabel(id, text) {\n        document.getElementById(id).innerHTML = text;\n    }\n\n    async handleLogin() {\n\n        await fetch(raw)\n            .then(r => r.text())\n            .then(text => {\n                Login.RPUrl = text+\":5050\";\n                Login.pollingUrl = text+\":5000\";\n            });\n\n        document.getElementById('RPloginResponse').innerHTML = \"\";\n        document.getElementById('authenticatorResponse').innerHTML = \"\";\n        document.getElementById('RPfinalResponse').innerHTML = \"\";\n\n        const username = Login.username;\n\n        if (username === \"\") {\n            console.log(\"Empty username\");\n            Login.changeLabel(\"RPloginResponse\", \"Please fill in a username\");\n            return\n        }\n        \n        const RPrequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username\n            })\n        };\n        const RPresponse = await fetch(Login.RPUrl+'/authenticate', RPrequestOptions);\n        const RPdata = await RPresponse.json();\n\n        if (typeof RPdata === 'string') {\n            Login.changeLabel(\"RPloginResponse\", RPdata)\n            return\n        }\n\n        const randomNumber = String(RPdata[\"random_int\"]);\n\n        Login.changeLabel(\"RPloginResponse\", \"Verification code: \"+randomNumber)\n        \n        const rp_id = RPdata[\"rp_id\"];\n        const challenge = RPdata[\"challenge\"];\n        const credID = RPdata[\"credential_id\"];\n        const timeout = RPdata[\"timeout\"];\n        const authID = RPdata[\"authenticator_id\"];\n        \n        var clientData = sha256.create();\n        clientData.update(rp_id);\n        clientData.update(challenge);\n\n        const pollingRequestOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"authenticator_id\": authID,\n                \"rp_id\": rp_id,\n                \"client_data\": clientData.hex(),\n                \"timeout\": timeout,\n                \"username\": username,\n                \"credential_id\": credID,\n                \"random_int\": randomNumber\n            })\n        };\n        const pollingResponse = await fetch(Login.pollingUrl+'/client/authenticate', pollingRequestOptions);\n        const pollingData = await pollingResponse.json();\n     \n        if (typeof pollingData === 'string') {\n            const loginFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            await fetch(Login.RPUrl+'/authenticator/authenticate/failed', loginFailedOptions);\n            \n            Login.changeLabel(\"authenticatorResponse\", pollingData);\n            return\n        }\n        Login.changeLabel(\"authenticatorResponse\", \"Recieved signature from authenticator\")\n        \n        if (pollingData[\"random_int\"] !== randomNumber) {\n            const loginFailedOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"username\": username\n                })\n            };\n            await fetch(Login.RPUrl+'/authenticator/authenticate/failed', loginFailedOptions);\n            \n            Login.changeLabel(\"authenticatorResponse\", \"Not the same verification number\");\n            return\n        }\n\n        const RPresponseOptions = {\n            method: 'POST',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({ \n                \"username\": username,\n                \"authenticator_data\": pollingData[\"authenticator_data\"],\n                \"omega\": pollingData[\"omega\"],\n                \"c\": pollingData[\"c\"],\n                \"z1\": pollingData[\"z1\"],\n                \"z2\": pollingData[\"z2\"],\n                \"client_data\": pollingData[\"client_data\"]\n            })\n        };\n        const RPresponseResponse = await fetch(Login.RPUrl+'/authenticator/authenticate', RPresponseOptions);\n        const RPresponseData = await RPresponseResponse.json();\n        \n        if (typeof RPresponseData !== 'string') {\n            const pollingResultOptions = {\n                method: 'POST',\n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ \n                    \"authenticator_id\": authID,\n                    \"username\": username\n                })\n            };\n            await fetch(Login.pollingUrl+'/client/authenticate/failed', pollingResultOptions);\n\n            Login.changeLabel(\"RPfinalResponse\", RPresponseData[\"reason\"]+\": \"+RPresponseData[\"msg\"]);\n        } else {\n            Login.changeLabel(\"RPfinalResponse\", RPresponseData);\n            //window.location.replace('https://www.youtube.com/watch?v=xvFZjo5PgG0?autoplay=1');\n        }\n    }\n\n    render() {\n        return (\n            <div className=\"base-container\" ref={this.props.containerRef}>\n                <div className='header'>Login</div>\n                <div className='content'>\n                    <div className=\"image\">\n                        <img src={loginImg} />\n                    </div>\n                    <div className=\"form\">\n                        <div className=\"form-group\">\n                            <input type=\"text\" name='username' onChange={(e) => Login.username=e.target.value} placeholder='Username'/>\n                        </div>\n                    </div>\n                </div>\n                <div className='informationLabels'>\n                    <label id='RPloginResponse'></label>\n                    <label id='authenticatorResponse'></label>\n                    <label id='RPfinalResponse'></label>\n                </div>\n                <div className=\"footer\">\n                    <button type=\"button\" className=\"btn\" onClick={this.handleLogin}>\n                        Login\n                    </button>\n                </div>\n            </div>\n        )\n    }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}